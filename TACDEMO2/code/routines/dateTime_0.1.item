package routines;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.DateTimeConstants;
import org.joda.time.LocalDateTime;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class dateTime {

    /**
     *
     */
    public static Date dateParser(String dateTimeString) {
        if (dateTimeString == null) {
            return null;
        }
        Date datum = null;
  //      System.out.println("Parsing ##" + dateTimeString + "##");
		try{
			// datum = (new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")).parse(dateTimeString);
			// Apr 21 2016  3:00PM
			datum = (new SimpleDateFormat("MMM dd yyyy  hh:mma")).parse(dateTimeString);
			} catch(Exception e) {
		    	e.printStackTrace();
		    	System.out.println("Parsing Error :" + e); 
			}
		return datum ;
    }


    /**
     *
     */
    public static Date dateParserSchramm(String dateTimeString) {
        if (dateTimeString == null) {
            return null;
        }
        Date datum = null;
  //      System.out.println("Parsing ##" + dateTimeString + "##");
		try{
			// datum = (new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")).parse(dateTimeString);
			// Apr 21 2016  3:00PM
			datum = (new SimpleDateFormat("dd-MM-yyyy hh:mm:ss")).parse(dateTimeString);
			} catch(Exception e) {
		    	e.printStackTrace();
		    	System.out.println("Parsing Error :" + e); 
			}
		return datum ;
    }
    
    public static LocalDateTime gatDateBeginDay(LocalDateTime start) {
        if (start != null ) {
            return  start.withTime(0, 0, 0, 0);
        }
        return null;
    }

    public static LocalDateTime gatDateEndDay(LocalDateTime end) {
        if (end != null ) {
            return  end.withTime(23, 59, 59, 999);
        }
        return null;
    }
    
    public static float daysBetweenDate(Date start, Date end) {
        if (start != null && end != null && start.before(end)) {
            LocalDate startL = new LocalDate(start);
            LocalDate endL = new LocalDate(end);
            return (float)  Days.daysBetween(startL, endL).getDays();
        }
        return 0;
    }
   
    public static Date getMonday(Date currentDate) {
        if (currentDate != null ) {
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.withDayOfWeek(DateTimeConstants.MONDAY).toDate()) ;
        }
        return null;
    }

    public static Date getTuesday(Date currentDate) {
        if (currentDate != null ) {
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.withDayOfWeek(DateTimeConstants.TUESDAY).toDate()) ;
        }
        return null;
    }

    public static Date getWednesDay(Date currentDate) {
        if (currentDate != null ) {
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.withDayOfWeek(DateTimeConstants.WEDNESDAY).toDate()) ;
        }
        return null;
    }

    public static Date getThursDay(Date currentDate) {
        if (currentDate != null ) {
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.withDayOfWeek(DateTimeConstants.THURSDAY).toDate()) ;
        }
        return null;
    }

    public static Date getFriday(Date currentDate) {
        if (currentDate != null ) {
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.withDayOfWeek(DateTimeConstants.FRIDAY).toDate()) ;
        }
        return null;
    }

    public static Date getSaturday(Date currentDate) {
        if (currentDate != null ) {
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.withDayOfWeek(DateTimeConstants.SATURDAY).toDate()) ;
        }
        return null;
    }

    public static Date getSunday(Date currentDate) {
        if (currentDate != null ) {
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.withDayOfWeek(DateTimeConstants.SUNDAY).toDate()) ;
        }
        return null;
    }
    public static Date addTimeToDate(Date currentDate , String offsetInSec) {
        if (currentDate != null && offsetInSec != null ) {
        	
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.plusSeconds(Integer.parseInt(offsetInSec))).toDate() ;
        }
        return null;
    }
    public static Date addTimeToDateOffset(Date currentDate , String offsetInSec , Integer negativeOffset) {
        if (currentDate != null && offsetInSec != null ) {
        	
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
            return  (currentDateL.plusSeconds(Integer.parseInt(offsetInSec) - negativeOffset)).toDate() ;
        }
        return null;
    }
    public static Boolean compare(Date currentDate , Date expireDate) {
        if (currentDate != null && expireDate != null ) {
        	
        	LocalDateTime currentDateL = new LocalDateTime(currentDate);
        	LocalDateTime expireDateL = new LocalDateTime(expireDate);
            
        	return  (currentDateL.isAfter(expireDateL) ) ;
        }
        return null;
    }
}
